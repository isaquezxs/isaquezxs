-- Tela de Carregamento Shadow hub Brookhaven - Estilizada
local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Criando a ScreenGui
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ShadowHubLoading"
screenGui.Parent = playerGui

-- Fundo da tela
local background = Instance.new("Frame")
background.Size = UDim2.new(1,0,1,0)
background.Position = UDim2.new(0,0,0,0)
background.BackgroundColor3 = Color3.fromRGB(20,20,20)
background.BorderSizePixel = 0
background.Parent = screenGui

-- Título Shadow Hub
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1,0,0,100)
title.Position = UDim2.new(0,0,0.25,0)
title.BackgroundTransparency = 1
title.Text = "Shadow hub"
title.Font = Enum.Font.GothamBlack
title.TextSize = 60
title.TextColor3 = Color3.fromRGB(255,85,0)
title.Parent = background
title.TextScaled = true

-- Barra de carregamento com fundo
local barBackground = Instance.new("Frame")
barBackground.Size = UDim2.new(0.6,0,0,30)
barBackground.Position = UDim2.new(0.2,0,0.55,0)
barBackground.BackgroundColor3 = Color3.fromRGB(50,50,50)
barBackground.BorderSizePixel = 0
barBackground.Parent = background

-- Barra de preenchimento
local barFill = Instance.new("Frame")
barFill.Size = UDim2.new(0,0,1,0)
barFill.BackgroundColor3 = Color3.fromRGB(255,85,0)
barFill.BorderSizePixel = 0
barFill.Parent = barBackground

-- Gradiente na barra
local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255,85,0)),
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255,180,0)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255,85,0))
}
gradient.Rotation = 45
gradient.Parent = barFill

-- Texto de carregamento
local loadingText = Instance.new("TextLabel")
loadingText.Size = UDim2.new(1,0,0,30)
loadingText.Position = UDim2.new(0,0,0.62,0)
loadingText.BackgroundTransparency = 1
loadingText.Text = "Carregando..."
loadingText.Font = Enum.Font.Gotham
loadingText.TextSize = 28
loadingText.TextColor3 = Color3.fromRGB(255,255,255)
loadingText.Parent = background

-- Função para animar a barra
local function animateBar(duration)
    local startTime = tick()
    while tick() - startTime < duration do
        local progress = (tick() - startTime) / duration
        barFill.Size = UDim2.new(progress,0,1,0)
        task.wait(0.03)
    end
    barFill.Size = UDim2.new(1,0,1,0)
end

-- Função para piscar o texto
spawn(function()
    while screenGui.Parent do
        loadingText.TextTransparency = 0.3
        task.wait(0.5)
        loadingText.TextTransparency = 0
        task.wait(0.5)
    end
end)

-- Executa animação por 5 segundos
animateBar(5)

-- Remove tela após carregar
task.wait(0.5)
screenGui:Destroy()

-- Carrega a biblioteca UI
local success, redzlib = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/tbao143/Library-ui/refs/heads/main/Redzhubui"))()
end)

if not success then
    warn("Erro ao carregar a biblioteca UI")
    return
end

local Window = redzlib:MakeWindow({
    Title = "Shadow hub V1| Brookhaven",
    SubTitle = "by isaquexz",
    SaveFolder = "testando | Shadow v1"
})

Window:AddMinimizeButton({
    Button = { Image = "rbxassetid://8652665149", BackgroundTransparency = 0 },
    Corner = { CornerRadius = UDim.new(35, 1) },
})

-- Tab1: Credits
local Tab1 = Window:MakeTab({"Credits", "info"})

Tab1:AddDiscordInvite({
    Name = "Shadow hub",
    Description = "Join server",
    Logo = "rbxassetid://8652665149",
    Invite = "https://discord.gg/tsxKumHC",
})

local Section = Tab1:AddSection({"Credits"})

Tab1:AddParagraph({"Criador", "isaquexsz"})
Tab1:AddParagraph({"Versão", "1.0.0V"})
Tab1:AddParagraph({"Executor", "KRNL"})
Tab1:AddParagraph({"total players", tostring(#game.Players:GetPlayers())})

-- Tab2: Troll V1
local Tab2 = Window:MakeTab({"Troll V1", "fun"})
local Section = Tab2:AddSection({"Spectate"})

-- Dropdown para selecionar jogador 
local killDropdown = Tab2:AddDropdown({
    Name = "Selecionar Jogador",
    Description = "Escolha um jogador para trollar",
    Options = getPlayerList(),
    Default = "",
    Callback = function(value)
        selectedPlayerName = value
        getgenv().Target = value
        game.StarterGui:SetCore("SendNotification", {
            Title = "Jogador Selecionado",
            Text = value .. " selecionado!",
            Duration = 3
        })
    end
})

-- Botão para atualizar lista de jogadores
Tab2:AddButton({
    Name = "Atualizar Player List",
    Callback = function()
        local newPlayers = getPlayerList()
        if killDropdown then
            killDropdown:Set(newPlayers)
        end
        game.StarterGui:SetCore("SendNotification", {
            Title = "Lista Atualizada",
            Text = "Lista de jogadores atualizada!",
            Duration = 3
        })
    end
})

-- Função Spectar Jogador (otimizada)
Tab2:AddToggle({
    Name = "Spectar Player",
    Default = false,
    Callback = function(value)
        local Camera = workspace.CurrentCamera

        if value then
            if getgenv().CameraConnection then
                getgenv().CameraConnection:Disconnect()
            end
            
            getgenv().CameraConnection = RunService.Heartbeat:Connect(function()
                if value and selectedPlayerName then
                    local targetPlayer = Players:FindFirstChild(selectedPlayerName)
                    if targetPlayer and targetPlayer.Character then
                        local humanoid = targetPlayer.Character:FindFirstChild("Humanoid")
                        if humanoid then
                            Camera.CameraSubject = humanoid
                            return
                        end
                    end
                end
                if LocalPlayer.Character then
                    local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                    if humanoid then
                        Camera.CameraSubject = humanoid
                    end
                end
            end)
        else
            if getgenv().CameraConnection then
                getgenv().CameraConnection:Disconnect()
                getgenv().CameraConnection = nil
            end
            if LocalPlayer.Character then
                local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
                if humanoid then
                    Camera.CameraSubject = humanoid
                end
            end
        end
    end
})-- Botão para teleportar até o jogador
Tab2:AddButton({
    Name = "Teleportar até o Player",
    Callback = function()
        if not selectedPlayerName then return end
        
        local character = LocalPlayer.Character
        local humanoidRootPart = character and character:FindFirstChild("HumanoidRootPart")
        if not humanoidRootPart then return end

        local targetPlayer = Players:FindFirstChild(selectedPlayerName)
        if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
            humanoidRootPart.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame
            game.StarterGui:SetCore("SendNotification", {
                Title = "TP Concluído",
                Text = "Teleportado até " .. selectedPlayerName,
                Duration = 5
            })
        end
    end
})


-- Tab3: Admin
local Tab3 = Window:MakeTab({"Admin", "Home"})

Tab3:AddButton({"Admin", function(Value)
    local Version = "1.6.41"
    local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/download/" .. Version .. "/main.lua"))()
    local Window = WindUI:CreateWindow({
        Title = "PAINEL SHADOW",
        Icon = "shield",
        Author = "By isaquexsz",
        Folder = "Fire",
        Size = UDim2.fromOffset(330, 220),
        Transparent = true,
        Theme = "Red",
        Resizable = true,
        SideBarWidth = 200,
        Background = "8652665149",
        BackgroundImageTransparency = 0.10,
        HideSearchBar = true,
        ScrollBarEnabled = false,
        User = {
            Enabled = true,
            Xxxhey_lorenzo1 = true,
            Callback = function()
                print("clicked")
            end,
        },
        KeySystem = {
            Key = { "isaquexsz9992", "PainelAdm" },
            Note = "painel Shadow",
            Thumbnail = {
                Image = "rbxassetid://8652665149",
                Title = "Key system",
            },
            URL = "https://github.com/Footagesus/WindUI",
            SaveKey = true,
        },
    })

    Window:EditOpenButton({
        Title = "Shadow Adm",
        Icon = "shield",
        CornerRadius = UDim.new(0,16),
        StrokeThickness = 2,
        Color = ColorSequence.new(
            Color3.fromHex("FF0000"), 
            Color3.fromHex("FFFFFF")
        ),
        OnlyMobile = false,
        Enabled = true,
        Draggable = true,
    })

    local Tab = Window:Tab({
        Title = "Protetion",
        Icon = "skull",
        Locked = false,
    })

    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local StarterGui = game:GetService("StarterGui")
    local HttpService = game:GetService("HttpService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local TextChatService = game:GetService("TextChatService")

    -- Gera lista com todos os nomes dos jogadores
    local playerNames = {}
    for _, plr in ipairs(Players:GetPlayers()) do
        table.insert(playerNames, plr.Name)
    end

    -- Variável para armazenar os jogadores selecionados no Dropdown
    local selectedPlayers = {}

    local Dropdown = Tab:Dropdown({
        Title = "Selecionar Jogadores",
        Values = playerNames,
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(newSelectedPlayers)
            selectedPlayers = newSelectedPlayers
            print("Jogadores selecionados: " .. HttpService:JSONEncode(selectedPlayers))
        end
    })

    -- Atualiza lista automaticamente quando entra ou sai jogador
    Players.PlayerAdded:Connect(function(plr)
        table.insert(playerNames, plr.Name)
        Dropdown:SetValues(playerNames)
    end)

    Players.PlayerRemoving:Connect(function(plr)
        for i, name in ipairs(playerNames) do
            if name == plr.Name then
                table.remove(playerNames, i)
                break
            end
        end
        Dropdown:SetValues(playerNames)
    end)

    -- Adiciona o Toggle para View Player na aba Protetion
    local ViewToggle = Tab:Toggle({
        Title = "Visualizar Jogador",
        Icon = "eye",
        Default = false,
        Callback = function(state)
            if state then
                if #selectedPlayers > 0 then
                    local targetPlayerName = selectedPlayers[1]
                    local targetPlayer = Players:FindFirstChild(targetPlayerName)
                    if targetPlayer and targetPlayer.Character and targetPlayer.Character:FindFirstChild("HumanoidRootPart") then
                        local camera = workspace.CurrentCamera
                        camera.CameraSubject = targetPlayer.Character.Humanoid
                        camera.CameraType = Enum.CameraType.Follow
                        StarterGui:SetCore("SendNotification", {
                            Title = "Visualizando",
                            Text = "Câmera focada em " .. targetPlayer.Name,
                            Duration = 3
                        })
                    else
                        ViewToggle:Set(false)
                        StarterGui:SetCore("SendNotification", {
                            Title = "Erro",
                            Text = "Jogador " .. targetPlayerName .. " não encontrado ou sem personagem!",
                            Duration = 3
                        })
                    end
                else
                    ViewToggle:Set(false)
                    StarterGui:SetCore("SendNotification", {
                        Title = "Erro",
                        Text = "Nenhum jogador selecionado no Dropdown!",
                        Duration = 3
                    })
                end
            else
                local camera = workspace.CurrentCamera
                camera.CameraSubject = LocalPlayer.Character and LocalPlayer.Character.Humanoid
                camera.CameraType = Enum.CameraType.Custom
                StarterGui:SetCore("SendNotification", {
                    Title = "Visualização Desativada",
                    Text = "Câmera restaurada para o seu personagem.",
                    Duration = 3
                })
            end
        end
    })

    -- Função para enviar mensagem no chat
    local function sendChatMessage(message)
        if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
            local textChannel = TextChatService.TextChannels.RBXGeneral
            if textChannel then
                textChannel:SendAsync(message)
                return true
            else
                return false
            end
        else
            local success, err = pcall(function()
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
            end)
            return success
        end
    end

    -- Adiciona o Botão Verifique na aba Protetion
    local VerifyButton = Tab:Button({
        Title = "Verifique",
        Icon = "check",
        Callback = function()
            local success1 = sendChatMessage("/Verify")
            task.wait(0.5)
            local success2 = sendChatMessage("Shadow Hub")
            
            if success1 and success2 then
                StarterGui:SetCore("SendNotification", {
                    Title = "Verificação",
                    Text = "Comandos '/Verifique e 'Shadow Hub' enviados no chat!",
                    Duration = 3
                })
            else
                StarterGui:SetCore("SendNotification", {
                    Title = "Erro",
                    Text = "Falha ao enviar uma ou ambas as mensagens no chat!",
                    Duration = 3
                })
            end
        end
    })

    print("Painel adm adicionado!")
end})

local Section = Tab3:AddSection({"Chat Spy"})

Tab3:AddButton({"Chat Spy", function(Value)
    local Players = game:GetService("Players")
    local LocalPlayer = Players.LocalPlayer
    local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()

    local estiloValue = Character:WaitForChild("Estilo", 5)

    if estiloValue and estiloValue:IsA("StringValue") then
        local estilo = estiloValue.Value
        print("Estilo detectado:", estilo)
        
        if estilo == "MandrakeStyle" then
            local mandrake = workspace:FindFirstChild("Mandrake")
            if mandrake and mandrake:IsA("BasePart") then
                local hrp = Character:WaitForChild("HumanoidRootPart")
                hrp.CFrame = mandrake.CFrame + Vector3.new(0, 5, 0)
                print("Teleportado para Mandrake!")
            else
                warn("Mandrake não encontrado no workspace")
            end
        else
            print("Estilo diferente, não vai teleportar")
        end
    else
        warn("Objeto 'Estilo' não encontrado no personagem")
    end
    print("chat a pasmado!")
end})

local Section = Tab3:AddSection({"Domain Expansion"})

-- Tab4: Scripts Trolls
local Tab4 = Window:MakeTab({"Scripts Trolls", "fire"})

Tab4:AddSection({"Black Hole"})

Tab4:AddButton({
    Name = "Black Hole",
    Description = "Ativando isso você puxa Parts até o seu personagem",
    Callback = function()
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local LocalPlayer = Players.LocalPlayer
        local Workspace = game:GetService("Workspace")

        local angle = 1
        local radius = 10
        local blackHoleActive = false

        local function setupPlayer()
            local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

            local Folder = Instance.new("Folder", Workspace)
            local Part = Instance.new("Part", Folder)
            local Attachment1 = Instance.new("Attachment", Part)
            Part.Anchored = true
            Part.CanCollide = false
            Part.Transparency = 1

            return humanoidRootPart, Attachment1
        end

        local humanoidRootPart, Attachment1 = setupPlayer()

        if not getgenv().Network then
            getgenv().Network = {
                BaseParts = {},
                Velocity = Vector3.new(14.46262424, 14.46262424, 14.46262424)
            }

            Network.RetainPart = function(part)
                if typeof(part) == "Instance" and part:IsA("BasePart") and part:IsDescendantOf(Workspace) then
                    table.insert(Network.BaseParts, part)
                    part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
                    part.CanCollide = false
                end
            end

            local function EnablePartControl()
                LocalPlayer.ReplicationFocus = Workspace
                RunService.Heartbeat:Connect(function()
                    sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
                    for _, part in pairs(Network.BaseParts) do
                        if part:IsDescendantOf(Workspace) then
                            part.Velocity = Network.Velocity
                        end
                    end
                end)
            end

            EnablePartControl()
        end

        local function ForcePart(v)
            if v:IsA("Part") and not v.Anchored and not v.Parent:FindFirstChild("Humanoid") and not v.Parent:FindFirstChild("Head") and v.Name ~= "Handle" then
                for _, x in next, v:GetChildren() do
                    if x:IsA("BodyAngularVelocity") or x:IsA("BodyForce") or x:IsA("BodyGyro") or x:IsA("BodyPosition") or x:IsA("BodyThrust") or x:IsA("BodyVelocity") or x:IsA("RocketPropulsion") then
                        x:Destroy()
                    end
                end
                if v:FindFirstChild("Attachment") then
                    v:FindFirstChild("Attachment"):Destroy()
                end
                if v:FindFirstChild("AlignPosition") then
                    v:FindFirstChild("AlignPosition"):Destroy()
                end
                if v:FindFirstChild("Torque") then
                    v:FindFirstChild("Torque"):Destroy()
                end
                v.CanCollide = false
                
                local Torque = Instance.new("Torque", v)
                Torque.Torque = Vector3.new(1000000, 1000000, 1000000)
                local AlignPosition = Instance.new("AlignPosition", v)
                local Attachment2 = Instance.new("Attachment", v)
                Torque.Attachment0 = Attachment2
                AlignPosition.MaxForce = math.huge
                AlignPosition.MaxVelocity = math.huge
                AlignPosition.Responsiveness = 500
                AlignPosition.Attachment0 = Attachment2
                AlignPosition.Attachment1 = Attachment1
            end
        end

        local function toggleBlackHole()
            blackHoleActive = not blackHoleActive
            if blackHoleActive then
                for _, v in next, Workspace:GetDescendants() do
                    ForcePart(v)
                end

                Workspace.DescendantAdded:Connect(function(v)
                    if blackHoleActive then
                        ForcePart(v)
                    end
                end)

                spawn(function()
                    while blackHoleActive and RunService.RenderStepped:Wait() do
                        angle = angle + math.rad(2)

                        local offsetX = math.cos(angle) * radius
                        local offsetZ = math.sin(angle) * radius

                        Attachment1.WorldCFrame = humanoidRootPart.CFrame * CFrame.new(offsetX, 0, offsetZ)
                    end
                end)
            else
                Attachment1.WorldCFrame = CFrame.new(0, -1000, 0)
            end
        end

        LocalPlayer.CharacterAdded:Connect(function()
            humanoidRootPart, Attachment1 = setupPlayer()
            if blackHoleActive then
                toggleBlackHole()
            end
        end)

        local library = loadstring(game:HttpGet("https://raw.githubusercontent.com/miroeramaa/TurtleLib/main/TurtleUiLib.lua"))()
        local window = library:Window("Projeto LKB")

        window:Slider("Radius Blackhole",1,100,10, function(Value)
           radius = Value
        end)

        window:Toggle("Blackhole", true, function(Value)
               if Value then
                    toggleBlackHole()
                else
                    blackHoleActive = false
                end
        end)

        spawn(function()
            while true do
                RunService.RenderStepped:Wait()
                if blackHoleActive then
                    angle = angle + math.rad(1)
                end
            end
        end)

        toggleBlackHole()
    end
})

Tab4:AddSection({"Puxar Parts"})

Tab4:AddButton({
    Name = "Puxar Parts",
    Description = "Para usar, chegue perto do Player Selecionado",
    Callback = function()
        -- GUI para puxar parts
        local Gui = Instance.new("ScreenGui")
        local Main = Instance.new("Frame")
        local Box = Instance.new("TextBox")
        local UITextSizeConstraint = Instance.new("UITextSizeConstraint")
        local Label = Instance.new("TextLabel")
        local UITextSizeConstraint_2 = Instance.new("UITextSizeConstraint")
        local Button = Instance.new("TextButton")
        local UITextSizeConstraint_3 = Instance.new("UITextSizeConstraint")

        Gui.Name = "Gui"
        Gui.Parent = game:GetService("CoreGui")
        Gui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

        Main.Name = "Main"
        Main.Parent = Gui
        Main.BackgroundColor3 = Color3.fromRGB(75, 75, 75)
        Main.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Main.BorderSizePixel = 0
        Main.Position = UDim2.new(0.335954279, 0, 0.542361975, 0)
        Main.Size = UDim2.new(0.240350261, 0, 0.166880623, 0)
        Main.Active = true
        Main.Draggable = true

        Box.Name = "Box"
        Box.Parent = Main
        Box.BackgroundColor3 = Color3.fromRGB(95, 95, 95)
        Box.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Box.BorderSizePixel = 0
        Box.Position = UDim2.new(0.0980926454, 0, 0.218712583, 0)
        Box.Size = UDim2.new(0.801089942, 0, 0.364963502, 0)
        Box.FontFace = Font.new("rbxasset://fonts/families/SourceSansSemibold.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
        Box.PlaceholderText = "Player here"
        Box.Text = ""
        Box.TextColor3 = Color3.fromRGB(255, 255, 255)
        Box.TextScaled = true
        Box.TextSize = 31.000
        Box.TextWrapped = true

        UITextSizeConstraint.Parent = Box
        UITextSizeConstraint.MaxTextSize = 31

        Label.Name = "Label"
        Label.Parent = Main
        Label.BackgroundColor3 = Color3.fromRGB(95, 95, 95)
        Label.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Label.BorderSizePixel = 0
        Label.Size = UDim2.new(1, 0, 0.160583943, 0)
        Label.FontFace = Font.new("rbxasset://fonts/families/Nunito.json", Enum.FontWeight.Bold, Enum.FontStyle.Normal)
        Label.Text = "Bring Parts | Made by: Lusquinha_067"
        Label.TextColor3 = Color3.fromRGB(255, 255, 255)
        Label.TextScaled = true
        Label.TextSize = 14.000
        Label.TextWrapped = true

        UITextSizeConstraint_2.Parent = Label
        UITextSizeConstraint_2.MaxTextSize = 21

        Button.Name = "Button"
        Button.Parent = Main
        Button.BackgroundColor3 = Color3.fromRGB(95, 95, 95)
        Button.BorderColor3 = Color3.fromRGB(0, 0, 0)
        Button.BorderSizePixel = 0
        Button.Position = UDim2.new(0.183284417, 0, 0.656760991, 0)
        Button.Size = UDim2.new(0.629427791, 0, 0.277372271, 0)
        Button.Font = Enum.Font.Nunito
        Button.Text = "Bring | Off"
        Button.TextColor3 = Color3.fromRGB(255, 255, 255)
        Button.TextScaled = true
        Button.TextSize = 28.000
        Button.TextWrapped = true

        UITextSizeConstraint_3.Parent = Button
        UITextSizeConstraint_3.MaxTextSize = 28

        -- Scripts para puxar parts
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local LocalPlayer = Players.LocalPlayer
        local UserInputService = game:GetService("UserInputService")
        local Workspace = game:GetService("Workspace")

        local character
        local humanoidRootPart

        mainStatus = true
        UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
            if input.KeyCode == Enum.KeyCode.RightControl and not gameProcessedEvent then
                mainStatus = not mainStatus
                Main.Visible = mainStatus
            end
        end)

        local Folder = Instance.new("Folder", Workspace)
        local Part = Instance.new("Part", Folder)
        local Attachment1 = Instance.new("Attachment", Part)
        Part.Anchored = true
        Part.CanCollide = false
        Part.Transparency = 1

        if not getgenv().Network then
            getgenv().Network = {
                BaseParts = {},
                Velocity = Vector3.new(14.46262424, 14.46262424, 14.46262424)
            }

            Network.RetainPart = function(Part)
                if Part:IsA("BasePart") and Part:IsDescendantOf(Workspace) then
                    table.insert(Network.BaseParts, Part)
                    Part.CustomPhysicalProperties = PhysicalProperties.new(0, 0, 0, 0, 0)
                    Part.CanCollide = false
                end
            end

            local function EnablePartControl()
                LocalPlayer.ReplicationFocus = Workspace
                RunService.Heartbeat:Connect(function()
                    sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
                    for _, Part in pairs(Network.BaseParts) do
                        if Part:IsDescendantOf(Workspace) then
                            Part.Velocity = Network.Velocity
                        end
                    end
                end)
            end

            EnablePartControl()
        end

        local function ForcePart(v)
            if v:IsA("BasePart") and not v.Anchored and not v.Parent:FindFirstChildOfClass("Humanoid") and not v.Parent:FindFirstChild("Head") and v.Name ~= "Handle" then
                for _, x in ipairs(v:GetChildren()) do
                    if x:IsA("BodyMover") or x:IsA("RocketPropulsion") then
                        x:Destroy()
                    end
                end
                if v:FindFirstChild("Attachment") then
                    v:FindFirstChild("Attachment"):Destroy()
                end
                if v:FindFirstChild("AlignPosition") then
                    v:FindFirstChild("AlignPosition"):Destroy()
                end
                if v:FindFirstChild("Torque") then
                    v:FindFirstChild("Torque"):Destroy()
                end
                v.CanCollide = false
                local Torque = Instance.new("Torque", v)
                Torque.Torque = Vector3.new(100000, 100000, 100000)
                local AlignPosition = Instance.new("AlignPosition", v)
                local Attachment2 = Instance.new("Attachment", v)
                Torque.Attachment0 = Attachment2
                AlignPosition.MaxForce = math.huge
                AlignPosition.MaxVelocity = math.huge
                AlignPosition.Responsiveness = 200
                AlignPosition.Attachment0 = Attachment2
                AlignPosition.Attachment1 = Attachment1
            end
        end

        local blackHoleActive = false
        local DescendantAddedConnection

        local function toggleBlackHole()
            blackHoleActive = not blackHoleActive
            if blackHoleActive then
                Button.Text = "Bring Parts | On"
                for _, v in ipairs(Workspace:GetDescendants()) do
                    ForcePart(v)
                end

                DescendantAddedConnection = Workspace.DescendantAdded:Connect(function(v)
                    if blackHoleActive then
                        ForcePart(v)
                    end
                end)

                spawn(function()
                    while blackHoleActive and RunService.RenderStepped:Wait() do
                        Attachment1.WorldCFrame = humanoidRootPart.CFrame
                    end
                end)
            else
                Button.Text = "Bring Parts | Off"
                if DescendantAddedConnection then
                    DescendantAddedConnection:Disconnect()
                end
            end
        end

        local function getPlayer(name)
            local lowerName = string.lower(name)
            for _, p in pairs(Players:GetPlayers()) do
                local lowerPlayer = string.lower(p.Name)
                if string.find(lowerPlayer, lowerName) then
                    return p
                elseif string.find(string.lower(p.DisplayName), lowerName) then
                    return p
                end
            end
        end

        local player = nil

        Box.FocusLost:Connect(function(enterPressed)
            if enterPressed then
                player = getPlayer(Box.Text)
                if player then
                    Box.Text = player.Name
                    print("Player found:", player.Name)
                else
                    print("Player not found")
                end
            end
        end)

        Button.MouseButton1Click:Connect(function()
            if player then
                character = player.Character or player.CharacterAdded:Wait()
                humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                toggleBlackHole()
            else
                print("Player is not selected")
            end
        end)
    end
})

Tab4:AddSection({"Invisível"})

Tab4:AddButton({
    Name = "Ficar Invisível",
    Description = "Ficar invisível FE",
    Callback = function()
        local args = {
            [1] = {
                [1] = 102344834840946,
                [2] = 70400527171038,
                [3] = 0,
                [4] = 0,
                [5] = 0,
                [6] = 0
            }
        }

        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ChangeCharacterBody"):InvokeServer(unpack(args))
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Wear"):InvokeServer(111858803548721)
        
        local allaccessories = {}

        for zxcwefwfecas, xcaefwefas in ipairs({
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.BackAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.FaceAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.FrontAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.NeckAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.HatAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.HairAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.ShouldersAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.WaistAccessory,
            game.Players.LocalPlayer.Character.Humanoid.HumanoidDescription.GraphicTShirt
        }) do
            for scacvdfbdb in string.gmatch(xcaefwefas, "%d+") do
                table.insert(allaccessories, tonumber(scacvdfbdb))
            end
        end

        task.wait()

        for asdwr,asderg in ipairs(allaccessories) do
            task.spawn(function()
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Wear"):InvokeServer(asderg)
                print(asderg)
            end)
        end
    end
})

Tab4:AddSection({"Avatar RGB"})

local colors = { "Bright red", "Lime green", "Bright blue", "Bright yellow", "Bright cyan", "Hot pink", "Royal purple" }
local rgbEnabled = false

local function changeColor(color)
    local args = { color }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ChangeBodyColor"):FireServer(unpack(args))
end

local function toggleRGBCharacter(enabled)
    rgbEnabled = enabled
    if rgbEnabled then
        while rgbEnabled do
            for _, color in ipairs(colors) do
                if not rgbEnabled then return end
                changeColor(color)
                task.wait(0.5)
            end
        end
    end
end

Tab4:AddToggle({
    Name = "RGB Character",
    Description = "Deixa seu personagem RGB",
    Default = false,
    Callback = function(value)
        toggleRGBCharacter(value)
    end
})

Tab4:AddSection({"Cabelo RGB"})

local hairColors = {
    Color3.new(1, 1, 0), Color3.new(0, 0, 1), Color3.new(1, 0, 1), Color3.new(1, 1, 1),
    Color3.new(0, 1, 0), Color3.new(0.5, 0, 1), Color3.new(1, 0.647, 0), Color3.new(0, 1, 1)
}
local isActive = false

local function changeHairColor()
    local i = 1
    while isActive do
        if not isActive then break end
        local args = { [1] = "ChangeHairColor2", [2] = hairColors[i] }
        game:GetService("ReplicatedStorage"):WaitForChild("RE"):WaitForChild("1Max1y"):FireServer(unpack(args))
        task.wait(0.1)
        i = i % #hairColors + 1
    end
end

Tab4:AddToggle({
    Name = "Cabelo RGB",
    Description = "Deixa Seu Cabelo RGB",
    Default = false,
    Callback = function(value)
        isActive = value
        if isActive then
            changeHairColor()
        end
    end
})

Tab4:AddSection({"Anti Sit"})

Tab4:AddToggle({
    Name = "Anti Sit",
    Description = "Não Deixa seu personagem Sentar",
    Default = false,
    Callback = function(Value)
        local player = game.Players.LocalPlayer
        local connections = {}
        local runService = game:GetService("RunService")

        local function preventSitting(humanoid)
            if humanoid then
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
                local sitConnection = humanoid.StateChanged:Connect(function(_, newState)
                    if newState == Enum.HumanoidStateType.Seated then
                        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
                    end
                end)
                table.insert(connections, sitConnection)
            end
        end

        local function monitorCharacter()
            local function onCharacterAdded(character)
                local humanoid = character:WaitForChild("Humanoid")
                preventSitting(humanoid)
            end

            local characterAddedConnection = player.CharacterAdded:Connect(onCharacterAdded)
            table.insert(connections, characterAddedConnection)

            if player.Character then
                onCharacterAdded(player.Character)
            end
        end

        local function resetSitting()
            for _, connection in ipairs(connections) do
                connection:Disconnect()
            end
            connections = {}
            local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
            end
        end

        if Value then
            monitorCharacter()
            local heartbeatConnection = runService.Heartbeat:Connect(function()
                local humanoid = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
                end
            end)
            table.insert(connections, heartbeatConnection)
        else
            resetSitting()
        end
    end
})